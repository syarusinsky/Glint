import("stdfaust.lib");

// constants
diffusion = 0.913;
mod1DelayMax = 227;
mod2DelayMax = 431;

// sliders
decaySlider = hslider( "Decay", 0.5, 0.0, 0.999, 0.001 );
modRateSlider = hslider( "Mod Freq", 0.01, 0.01, 1.0, 0.001 );
filterFreqSlider = hslider( "Filt Freq", 20000.0, 1.0, 20000.0, 0.001 );
drySlider = hslider( "Dry", 0.5, 0.0, 0.5, 0.001 );
wetSlider = hslider( "Wet", 0.5, 0.0, 0.5, 0.001 );

// basic all-pass filter
allpass( delayLen, feedbackGain ) = ( + : _ <: @(delayLen - 1), *(-feedbackGain) ) ~ * (feedbackGain) : mem, _ :> +;

// diffusion network algorithm
diffusionNetwork = allpass( 139, diffusion ) : allpass( 107, diffusion ) : allpass( 379, diffusion ) : allpass( 277, diffusion );

// reverb network block algorithms
reverbNetworkBlock1 = allpass( 2531, decaySlider ) : allpass( 1789, decaySlider ) : allpass( 1231, decaySlider ) : _;
reverbNetworkBlock2 = allpass(  907, decaySlider ) : allpass( 2647, decaySlider ) : allpass( 1571, decaySlider ) : _;
reverbNetwork = _ : ((si.bus(2) :> (_ - _) / 2 : reverbNetworkBlock1) ~ (@(4451) : reverbNetworkBlock2)) : _ * decaySlider;

// reverbed sound
wetSound = (si.bus(2) :> _ : fi.lowpass(1, filterFreqSlider) : diffusionNetwork) ~ reverbNetwork <: _, _;

// main process
process = _ <: (_,_ * drySlider), (_,_ :> (wetSound : fi.highpass(4, 20.0), fi.highpass(4, 20.0) : (_ * wetSlider), (_ * wetSlider))) :> _, _;
